name: Build & Push Images

on:
  workflow_call:
    inputs:
      version_tag:
        required: true
        type: string
      event_processor_tag:
        required: true
        type: string
      environment:
        required: true
        type: string
    secrets:
      AGENT_SECRET_PREFIX:
        required: true
      SIGNER_TOKEN:
        required: true
      CM_AUTH:
        required: true


jobs:
  build_images:
    name: Build Docker Images without dependencies
    strategy:
      fail-fast: false
      matrix:
        service: ['backend', 'frontend', 'user-auditor', 'web-pdf'] 
    uses: ./.github/workflows/v11-used-images-without-dependencies.yml
    with:
      microservice: ${{ matrix.service }}
      tag: ${{ inputs.version_tag }}
    secrets: inherit

  build_images_with_dependencies:
    name: Build & Push Images with dependencies
    needs: 
      - build_images
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code into the right branch
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: utmstack
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download base images
        run: |
          docker pull ghcr.io/threatwinds/eventprocessor/base:${{ inputs.event_processor_tag }}
          echo "Downloaded base images"      

      - name: Build and Sign Agent
        run: |
          echo "Building Agent..."
          cd ${{ github.workspace }}/agent
          
          GOOS=linux GOARCH=amd64 go build -o utmstack_agent_service -v -ldflags "-X 'github.com/utmstack/UTMStack/agent/config.REPLACE_KEY=${{ secrets.AGENT_SECRET_PREFIX }}'" .
          GOOS=windows GOARCH=amd64 go build -o utmstack_agent_service.exe -v -ldflags "-X 'github.com/utmstack/UTMStack/agent/config.REPLACE_KEY=${{ secrets.AGENT_SECRET_PREFIX }}'" .
          GOOS=windows GOARCH=arm64 go build -o utmstack_agent_service_arm64.exe -v -ldflags "-X 'github.com/utmstack/UTMStack/agent/config.REPLACE_KEY=${{ secrets.AGENT_SECRET_PREFIX }}'" .

          if [[ {{ inputs.environment }} != "alpha" ]]; then
            echo "Signing Windows Agent..."
            FILES_TO_SIGN=("utmstack_agent_service.exe" "utmstack_agent_service_arm64.exe")
            for file in "${FILES_TO_SIGN[@]}"; do
              echo "Uploading $file for signing..."
              RESPONSE=$(curl -sS -f -X POST http://customermanager.utmstack.com:8081/api/v1/upload \
                -H "Authorization: Bearer ${{ secrets.SIGNER_TOKEN }}" \
                -F "file=@$file")

              FILE_ID=$(echo "$RESPONSE" | jq -r '.file_id')

              if [[ -z "$FILE_ID" || "$FILE_ID" == "null" ]]; then
                echo "❌ Failed to upload $file for signing."
                exit 1
              fi

              echo "Uploaded $file with file_id: $FILE_ID"
              echo "Waiting for signing to complete..."

              while true; do
                STATUS=$(curl -sS -H "Authorization: Bearer ${{ secrets.SIGNER_TOKEN }}" \
                  http://customermanager.utmstack.com:8081/api/v1/status/$FILE_ID | jq -r '.status')

                if [[ "$STATUS" == "ready" ]]; then
                  echo "✅ $file has been signed."
                  break
                elif [[ "$STATUS" == "signing" ]]; then
                  echo "⏳ Still signing $file... waiting 5s"
                  sleep 5
                else
                  echo "❌ Unexpected status: $STATUS"
                  exit 1
                fi
              done

              echo "Downloading signed $file..."
              curl -sS -f -H "Authorization: Bearer ${{ secrets.SIGNER_TOKEN }}" \
                -o "$file" \
                http://customermanager.utmstack.com:8081/api/v1/download/$FILE_ID

              echo "Marking $file as finished..."
              curl -sS -X POST -H "Authorization: Bearer ${{ secrets.SIGNER_TOKEN }}" \
                http://customermanager.utmstack.com:8081/api/v1/finish/$FILE_ID > /dev/null || true
            done

            echo "✅ All agents signed successfully."
          else
            echo "Skipping signing for Alpha environment."
          fi
      
      - name: Build Plugins
        env:
          GOOS: linux
          GOARCH: amd64
        run: |
          cd ${{ github.workspace }}/plugins/alerts; go build -o com.utmstack.alerts.plugin -v .
          cd ${{ github.workspace }}/plugins/aws; go build -o com.utmstack.aws.plugin -v .
          cd ${{ github.workspace }}/plugins/azure; go build -o com.utmstack.azure.plugin -v .
          cd ${{ github.workspace }}/plugins/bitdefender; go build -o com.utmstack.bitdefender.plugin -v .
          cd ${{ github.workspace }}/plugins/config; go build -o com.utmstack.config.plugin -v .
          cd ${{ github.workspace }}/plugins/events; go build -o com.utmstack.events.plugin -v .
          cd ${{ github.workspace }}/plugins/gcp; go build -o com.utmstack.gcp.plugin -v .
          cd ${{ github.workspace }}/plugins/geolocation; go build -o com.utmstack.geolocation.plugin -v .
          cd ${{ github.workspace }}/plugins/inputs; go build -o com.utmstack.inputs.plugin -v .
          cd ${{ github.workspace }}/plugins/o365; go build -o com.utmstack.o365.plugin -v .
          cd ${{ github.workspace }}/plugins/sophos; go build -o com.utmstack.sophos.plugin -v .
          cd ${{ github.workspace }}/plugins/stats; go build -o com.utmstack.stats.plugin -v .
          cd ${{ github.workspace }}/plugins/soc-ai; go build -o com.utmstack.soc-ai.plugin -v .
          cd ${{ github.workspace }}/plugins/modules-config; go build -o com.utmstack.modules-config.plugin -v .
      
      - name: Prepare Dependencies for Event Processor Image
        run: |
          mkdir -p ./geolocation
          curl -sSL -H "Authorization: Bearer ${{ secrets.SIGNER_TOKEN }}" \
            "http://customermanager.utmstack.com:8081/api/v1/fs/v11-${{ inputs.environment }}/geolocation/asn-blocks-v4.csv" \
            -o ./geolocation/asn-blocks-v4.csv
          curl -sSL -H "Authorization: Bearer ${{ secrets.SIGNER_TOKEN }}" \
            "http://customermanager.utmstack.com:8081/api/v1/fs/v11-${{ inputs.environment }}/geolocation/asn-blocks-v6.csv" \
            -o ./geolocation/asn-blocks-v6.csv
          curl -sSL -H "Authorization: Bearer ${{ secrets.SIGNER_TOKEN }}" \
            "http://customermanager.utmstack.com:8081/api/v1/fs/v11-${{ inputs.environment }}/geolocation/blocks-v4.csv" -o ./geolocation/blocks-v4.csv
          curl -sSL -H "Authorization: Bearer ${{ secrets.SIGNER_TOKEN }}" \
            "http://customermanager.utmstack.com:8081/api/v1/fs/v11-${{ inputs.environment }}/geolocation/blocks-v6.csv" -o ./geolocation/blocks-v6.csv
          curl -sSL -H "Authorization: Bearer ${{ secrets.SIGNER_TOKEN }}" \
            "http://customermanager.utmstack.com:8081/api/v1/fs/v11-${{ inputs.environment }}/geolocation/locations-en.csv" -o ./geolocation/locations-en.csv

          docker build -t ghcr.io/utmstack/utmstack/eventprocessor:${{ inputs.version_tag }}-community --build-arg BASE_IMAGE=ghcr.io/threatwinds/eventprocessor/base:${{ inputs.event_processor_tag }} -f ./event_processor.Dockerfile .
          docker push ghcr.io/utmstack/utmstack/eventprocessor:${{ inputs.version_tag }}-community
          echo "Event Processor image built and pushed"

      - name: Build & Push Agent Manager Image
        run: |
          cd ${{ github.workspace }}/agent-manager
          GOOS=linux GOARCH=amd64  go build -o agent-manager -v .

          mkdir -p ./dependencies/agent/
          curl -sSL -H "Authorization: Bearer ${{ secrets.SIGNER_TOKEN }}" \
            "http://customermanager.utmstack.com:8081/api/v1/fs/v11-${{ inputs.environment }}/agent/utmstack_agent_dependencies_linux.zip" -o ./dependencies/agent/utmstack_agent_dependencies_linux.zip
          curl -sSL -H "Authorization: Bearer ${{ secrets.SIGNER_TOKEN }}" \
            "http://customermanager.utmstack.com:8081/api/v1/fs/v11-${{ inputs.environment }}/agent/utmstack_agent_dependencies_windows.zip" -o ./dependencies/agent/utmstack_agent_dependencies_windows.zip
          curl -sSL -H "Authorization: Bearer ${{ secrets.SIGNER_TOKEN }}" \
            "http://customermanager.utmstack.com:8081/api/v1/fs/v11-${{ inputs.environment }}/agent/utmstack_agent_dependencies_windows_arm64.zip" -o ./dependencies/agent/utmstack_agent_dependencies_windows_arm64.zip

          cp "${{ github.workspace }}/agent/utmstack_agent_service" ./dependencies/agent/
          # cp "${{ github.workspace }}/agent/utmstack_agent_service_arm64" ./dependencies/agent/
          cp "${{ github.workspace }}/agent/utmstack_agent_service.exe" ./dependencies/agent/
          cp "${{ github.workspace }}/agent/utmstack_agent_service_arm64.exe" ./dependencies/agent/
          cp "${{ github.workspace }}/agent/version.json" ./dependencies/agent/

          docker build -t ghcr.io/utmstack/utmstack/agent-manager:${{ inputs.version_tag }}-community .
          docker push ghcr.io/utmstack/utmstack/agent-manager:${{ inputs.version_tag }}-community
          echo "Agent Manager image built and pushed"
  
      - name: Push new release
        run: |
          echo "Pushing new release..."
          changelog=$(cat CHANGELOG.md)

          cmAuth=$(echo '${{ secrets.CM_AUTH }}' | jq -r '.')
          id=$(echo "$cmAuth" | jq -r '.id')
          key=$(echo "$cmAuth" | jq -r '.key')

          body=$(jq -n \
            --arg version "${{ inputs.version_tag }}" \
            --arg changelog "$changelog" \
            '{version: $version, changelog: $changelog}'
          )

          response=$(curl -s -X POST "https://customermanager.utmstack.com/${{ inputs.environment }}/api/v1/versions/register" \
            -H "Content-Type: application/json" \
            -H "id: $id" \
            -H "key: $key" \
            -d "$body")

          echo "Response: $response"